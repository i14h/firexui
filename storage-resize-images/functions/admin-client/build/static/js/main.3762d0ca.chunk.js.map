{"version":3,"sources":["logo.svg","components/SignIn.jsx","components/SignOutButton.jsx","App.js","reportWebVitals.js","index.js"],"names":["SignIn","auth","firebase","onClick","provider","GoogleAuthProvider","signInWithPopup","then","a","credentials","user","getIdTokenResult","idTokenResult","token","issuedAtTime","expirationTime","console","log","SignOutButton","currentUser","className","signOut","UserStatus","axios","get","headers","Authorization","status","message","App","useState","userStatus","setUserStatus","apps","length","elem","document","getElementById","apiKey","getAttribute","projectId","initializeApp","authDomain","useAuthState","isUserAnAdmin","admin","src","logo","alt","displayName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"kPAAe,MAA0B,iC,8EC4B1BA,MAtBf,WACE,IAAMC,EAAOC,IAASD,OAkBtB,OAAO,cAAC,IAAD,CAAcE,QAjBI,WACvB,IAAMC,EAAW,IAAIF,IAASD,KAAKI,mBACnCJ,EAAKK,gBAAgBF,GAAUG,KAA/B,+BAAAC,EAAA,MAAoC,WAAOC,GAAP,uBAAAD,EAAA,yDACV,MAApBC,EAAYC,KADkB,wDAE9BA,EAAOD,EAAYC,KAFW,SAGRA,EAAKC,mBAHG,OAG9BC,EAH8B,OAI9BC,EAAQD,EAAcC,MACtBC,EAAeF,EAAcE,aAC7BC,EAAiBH,EAAcG,eACnCC,QAAQC,IAAI,UACZD,QAAQC,IAAIJ,GACZG,QAAQC,IAAI,aACZD,QAAQC,IAAIH,GACZE,QAAQC,IAAI,mBACZD,QAAQC,IAAIF,GAZsB,4CAApC,2DCEWG,MATf,WACE,IAAMjB,EAAOC,IAASD,OACtB,OAA2B,MAApBA,EAAKkB,YAAsB,KAChC,wBAAQC,UAAU,kBAAkBjB,QAAS,kBAAMF,EAAKoB,WAAxD,uBCGAC,EACgB,EADhBA,EAEyB,EAFzBA,EAGmB,E,4CAGvB,WAA6BZ,GAA7B,iBAAAF,EAAA,sEAC4BE,EAAKC,mBADjC,cACMC,EADN,OAEMC,EAAQD,EAAcC,MAF5B,kBAIyBU,IAAMC,IAAI,aAAc,CAC3CC,QAAS,CACPC,cAAc,UAAD,OAAYb,MANjC,UAS0B,MAT1B,OASec,OATf,2CAWa,GAXb,iEAcIX,QAAQC,IAAI,KAAEW,SAdlB,mBAeW,GAfX,kCAiBS,GAjBT,2D,sBA+FeC,MA3Ef,WACE,MAAoCC,mBAASR,GAA7C,mBAAOS,EAAP,KAAmBC,EAAnB,KAEA,IAAK9B,IAAS+B,KAAKC,OAAQ,CACzB,IAAIC,EAAOC,SAASC,eAAe,gBAC/BC,EAASH,EAAKI,aAAa,WAC3BC,EAAYL,EAAKI,aAAa,cAClCrC,IAASuC,cAAc,CACrBH,OAAQA,EACRI,WAAYF,EAAY,mBACxBA,UAAWA,IAMf,IAAMvC,EAAOC,IAASD,OACtB,EAAe0C,YAAa1C,GAArBS,EAAP,oBAYA,OAXIA,G,2CACFkC,CAAclC,GAAMH,MAAK,SAACsC,GACpBA,EACFb,EAAcV,IAEdU,EAAcV,GACdrB,EAAKoB,cAKPX,GAAQqB,IAAeT,EAGvB,qBAAKF,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAK0B,IAAKC,EAAM3B,UAAU,WAAW4B,IAAI,SACzC,qCAAQtC,EAAKuC,eACb,yGACA,qBAAK7B,UAAU,GAAf,SACE,cAAC,EAAD,WAONW,IAAeT,EAIf,qBAAKF,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAK0B,IAAKC,EAAM3B,UAAU,WAAW4B,IAAI,SACzC,+EACA,qBAAK5B,UAAU,GAAf,SACE,cAAC,EAAD,WASR,qBAAKA,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAK0B,IAAKC,EAAM3B,UAAU,WAAW4B,IAAI,SACzC,6DACA,qBAAK5B,UAAU,GAAf,SACE,cAAC,EAAD,YC3FK8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7C,MAAK,YAAkD,IAA/C8C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASC,eAAe,SAM1Ba,M","file":"static/js/main.3762d0ca.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport firebase from \"firebase/app\";\nimport GoogleButton from \"react-google-button\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nfunction SignIn() {\n  const auth = firebase.auth();\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider).then(async (credentials) => {\n      if (credentials.user == null) return;\n      let user = credentials.user;\n      let idTokenResult = await user.getIdTokenResult();\n      let token = idTokenResult.token;\n      let issuedAtTime = idTokenResult.issuedAtTime;\n      let expirationTime = idTokenResult.expirationTime;\n      console.log(\"token:\");\n      console.log(token);\n      console.log(\"issuedAt:\");\n      console.log(issuedAtTime);\n      console.log(\"expirationTime:\");\n      console.log(expirationTime);\n    });\n  };\n  return <GoogleButton onClick={signInWithGoogle} />;\n}\n\nexport default SignIn;\n","import React from \"react\";\nimport firebase from \"firebase/app\";\n\nfunction SignOutButton() {\n  const auth = firebase.auth();\n  return auth.currentUser == null ? null : (\n    <button className=\"btn btn-warning\" onClick={() => auth.signOut()}>\n      Sign Out\n    </button>\n  );\n}\n\nexport default SignOutButton;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport firebase from \"firebase/app\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useState } from \"react\";\nimport SignIn from \"./components/SignIn\";\nimport SignOutButton from \"./components/SignOutButton\";\n\nvar UserStatus = {\n  kUnauthenticated: 0,\n  kAuthenticatedButNotAdmin: 1,\n  kAuthenticatedAdmin: 2,\n};\n\nasync function isUserAnAdmin(user) {\n  let idTokenResult = await user.getIdTokenResult();\n  let token = idTokenResult.token;\n  try {\n    const result = await axios.get(\"admin/work\", {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    if (result.status === 200) {\n      // The server has confirmed that this user is an Admin User.\n      return true;\n    }\n  } catch (e) {\n    console.log(e.message);\n    return false;\n  }\n  return false;\n}\n\nfunction App() {\n  const [userStatus, setUserStatus] = useState(UserStatus.kUnauthenticated);\n\n  if (!firebase.apps.length) {\n    var elem = document.getElementById(\"firebase-app\");\n    var apiKey = elem.getAttribute(\"api-key\");\n    var projectId = elem.getAttribute(\"project-id\");\n    firebase.initializeApp({\n      apiKey: apiKey,\n      authDomain: projectId + \".firebaseapp.com\",\n      projectId: projectId,\n    });\n  }\n\n  // Note: using `useAuthState` is only allowed after\n  // `firebase.initializeApp()` has been performed.\n  const auth = firebase.auth();\n  const [user] = useAuthState(auth);\n  if (user) {\n    isUserAnAdmin(user).then((admin) => {\n      if (admin) {\n        setUserStatus(UserStatus.kAuthenticatedAdmin);\n      } else {\n        setUserStatus(UserStatus.kAuthenticatedButNotAdmin);\n        auth.signOut();\n      }\n    });\n  }\n\n  if (user && userStatus === UserStatus.kAuthenticatedAdmin) {\n    // This is the homepage for authenticated administrators.\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>Hi, {user.displayName}</p>\n          <p>This is the Admin WebApp. You have superpowers!ðŸ”¥ ðŸš€</p>\n          <div className=\"\">\n            <SignOutButton />\n          </div>\n        </header>\n      </div>\n    );\n  }\n\n  if (userStatus === UserStatus.kAuthenticatedButNotAdmin) {\n    // This is the homepage for those who are authenticated, but the server\n    // has determined that they are not administrators.\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>You are not authorized to access this content.</p>\n          <div className=\"\">\n            <SignIn />\n          </div>\n        </header>\n      </div>\n    );\n  }\n\n  // This is the homepage for those who are not not authenticated yet.\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Welcome to the Admin Portal!</p>\n        <div className=\"\">\n          <SignIn />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}